BiocManager::install("circlize", version = "3.8")
BiocManager::install("devtools", version = "3.8")
BiocManager::install("BiocParallel", version = "3.8")
BiocManager::install("pathview", version = "3.8")
BiocManager::install("calibrate", version = "3.8")
BiocManager::install("gage", version = "3.8")
BiocManager::install("gageData", version = "3.8")
library(Seurat) #---------------------------\
library(ComplexHeatmap)
library(circlize)
library(plyr)
library(DESeq2)
library(edgeR)
library(genefilter)
library("devtools")
library("BiocParallel")
library(pathview)
#register(MulticoreParam(4))
library(R.utils)
library(gplots)
library(ggplot2)
library(limma)
library("calibrate")
library(gage)
library(gageData)
data(kegg.sets.hs)
install.packages("ggplot2",dependencies = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
?install.packages
library(foreach)
install.packages('doParallel')
library(doParallel)
registerDoParallel()
getDoParWorkers()
registerDoParallel(cores=3)
getDoParWorkers()
setwd("~/data/Bonser_ChIP_02_2018/Analysis_with_old_peakFix/DE/beds/geneAnchored/")
Secretory <- read.table("Secretory_IL13.DE.promoters.all.nearestPeak.best.bed", header=F, sep="\t")
Basal <- read.table("Basal_IL13.DE.promoters.all.nearestPeak.best.bed", header=F, sep="\t")
Proliferating <- read.table("Proliferating_IL13.DE.promoters.all.nearestPeak.best.bed", header=F, sep="\t")
Intermediate <- read.table("Intermediate_IL13.DE.promoters.all.nearestPeak.best.bed", header=F, sep="\t")
Ciliated <- read.table("Ciliated_IL13.DE.promoters.all.nearestPeak.best.bed", header=F, sep="\t")
D03_v_D00 <- read.table("../geneAnchored_timeSeries/byDay/Day_D00_vs_D03.DE.promoters.all.nearestPeak.best.bed")
D09_v_D00 <- read.table("../geneAnchored_timeSeries/byDay/Day_D00_vs_D09.DE.promoters.all.nearestPeak.best.bed")
D24_v_D00 <- read.table("../geneAnchored_timeSeries/byDay/Day_D00_vs_D24.DE.promoters.all.nearestPeak.best.bed")
D03U_v_D00 <- read.table("../geneAnchored_timeSeries/byDay_cellType/Day_D00_Undiff_vs_D03_Undifferentiated.DE.promoters.all.nearestPeak.best.bed")
D09U_v_D00 <- read.table("../geneAnchored_timeSeries/byDay_cellType/Day_D00_Undiff_vs_D09_Undifferentiated.DE.promoters.all.nearestPeak.best.bed")
D24I_v_D00 <- read.table("../geneAnchored_timeSeries/byDay_cellType/Day_D00_Undiff_vs_D24_Intermediate.DE.promoters.all.nearestPeak.best.bed")
D24B_v_D00 <- read.table("../geneAnchored_timeSeries/byDay_cellType/Day_D00_Undiff_vs_D24_Basal.DE.promoters.all.nearestPeak.best.bed")
D24C_v_D00 <- read.table("../geneAnchored_timeSeries/byDay_cellType/Day_D00_Undiff_vs_D24_Ciliated.DE.promoters.all.nearestPeak.best.bed")
D24S_v_D00 <- read.table("../geneAnchored_timeSeries/byDay_cellType/Day_D00_Undiff_vs_D24_Secretory.DE.promoters.all.nearestPeak.best.bed")
D24U_v_D00 <- read.table("../geneAnchored_timeSeries/byDay_cellType/Day_D00_Undiff_vs_D24_Unknown.DE.promoters.all.nearestPeak.best.bed")
D24P_v_D00 <- read.table("../geneAnchored_timeSeries/byDay_cellType/Day_D00_Undiff_vs_D24_Proliferating.DE.promoters.all.nearestPeak.best.bed")
Bulk <- read.table("Bulk.list.all.nearestPeak.best.bed",header=F, sep="\t")
Background <- read.table("All_tested.background.best.bed", header=F, sep="\t")
BackD03 <- read.table("../geneAnchored_timeSeries/byDay/All_tested.D03.background.best.bed", header=F, sep="\t")
BackD09 <- read.table("../geneAnchored_timeSeries/byDay/All_tested.D09.background.best.bed", header=F, sep="\t")
BackD24 <- read.table("../geneAnchored_timeSeries/byDay/All_tested.D24.background.best.bed", header=F, sep="\t")
SecretorySmall <- Secretory[,c(4,5,6,10,14,15,18,19)]
BasalSmall <- Basal[,c(4,5,6,10,14,15,18,19)]
ProliferatingSmall <- Proliferating[,c(4,5,6,10,14,15,18,19)]
IntermediateSmall <- Intermediate[,c(4,5,6,10,14,15,18,19)]
CiliatedSmall <- Ciliated[,c(4,5,6,10,14,15,18,19)]
BulkSmall <- Bulk[,c(4,5,6,7,11,12,15,16)]
AllSmall <- rbind(SecretorySmall,BasalSmall,ProliferatingSmall,IntermediateSmall, CiliatedSmall)
IL13geneList <- unique(AllSmall$V4)
D03_v_D00Small <- D03_v_D00[,c(4,5,6,10,14,15,18,19)]
D09_v_D00Small <- D09_v_D00[,c(4,5,6,10,14,15,18,19)]
D24_v_D00Small <- D24_v_D00[,c(4,5,6,10,14,15,18,19)]
D03U_v_D00Small <- D03U_v_D00[,c(4,5,6,10,14,15,18,19)]
D09U_v_D00Small <- D09U_v_D00[,c(4,5,6,10,14,15,18,19)]
D24U_v_D00Small <- D24U_v_D00[,c(4,5,6,10,14,15,18,19)]
D24B_v_D00Small <- D24B_v_D00[,c(4,5,6,10,14,15,18,19)]
D24I_v_D00Small <- D24I_v_D00[,c(4,5,6,10,14,15,18,19)]
D24S_v_D00Small <- D24S_v_D00[,c(4,5,6,10,14,15,18,19)]
D24C_v_D00Small <- D24C_v_D00[,c(4,5,6,10,14,15,18,19)]
D24P_v_D00Small <- D24P_v_D00[,c(4,5,6,10,14,15,18,19)]
ALL_DE <- rbind(D24U_v_D00Small,D24B_v_D00Small,D24I_v_D00Small,
D24S_v_D00Small,D24C_v_D00Small,D24P_v_D00Small)
D24_DE_sum <- unique(ALL_DE[,2])
SecretorySmall$group <- "Secretory"
BasalSmall$group <- "Basal"
ProliferatingSmall$group <- "Proliferating"
IntermediateSmall$group <- "Intermediate"
CiliatedSmall$group <- "Ciliated"
BulkSmall$group <- "Bulk"
D03_v_D00Small$group <- "D03vD00"
D09_v_D00Small$group <- "D09vD00"
D24_v_D00Small$group <- "D24vD00"
D03U_v_D00Small$group <- "D03UvD00"
D09U_v_D00Small$group <- "D09UvD00"
D24U_v_D00Small$group <- "D24UvD00"
D24B_v_D00Small$group <- "D24BvD00"
D24I_v_D00Small$group <- "D24IvD00"
D24S_v_D00Small$group <- "D24SvD00"
D24C_v_D00Small$group <- "D24CvD00"
D24P_v_D00Small$group <- "D24PvD00"
BackgroundSmall <- Background[,c(5,4,1,2,9,10,13,14)]
BackgroundSmall[,3] <- "NA"
BackgroundSmall[,4] <- "NA"
BackgroundSmall$group <- "All"
BackgroundSmall <- BackgroundSmall[!(BackgroundSmall$V5 %in% IL13geneList),]
BackD03Small <- BackD03[,c(5,4,1,2,9,10,13,14)]
BackD03Small[,3] <- "NA"
BackD03Small[,4] <- "NA"
BackD03Small$group <- "All"
colnames(BackD03Small) <- colnames(D03_v_D00Small)
BackD03Small <- BackD03Small[!(BackD03Small[,2] %in% D03_v_D00Small[,2]),]
D03_v_D00Small_wBackground <- rbind(D03_v_D00Small,BackD03Small)
colnames(D03_v_D00Small_wBackground) <- c("Gene","Ensembl_ID","gene_log2FC","gene_padj","peak","peak_log2FC","peak_padj","distance","group")
ggplot(D03_v_D00Small_wBackground, aes(x=distance, fill=group, color = group)) + geom_density(alpha=.1, adjust = 2) + xlim(-2e5,2e5)
ggsave("D03_vs_D00.Distribution.png",height=4, width=5, units=c("in"))
BackD09Small <- BackD09[,c(5,4,1,2,9,10,13,14)]
BackD09Small[,3] <- "NA"
BackD09Small[,4] <- "NA"
BackD09Small$group <- "All"
colnames(BackD09Small) <- colnames(D09_v_D00Small)
BackD09Small <- BackD09Small[!(BackD09Small[,2] %in% D09_v_D00Small[,2]),]
D09_v_D00Small_wBackground <- rbind(D09_v_D00Small,BackD09Small)
colnames(D09_v_D00Small_wBackground) <- c("Gene","Ensembl_ID","gene_log2FC","gene_padj","peak","peak_log2FC","peak_padj","distance","group")
ggplot(D09_v_D00Small_wBackground, aes(x=distance, fill=group, color = group)) + geom_density(alpha=.1, adjust = 2) + xlim(-2e5,2e5)
ggsave("D09_vs_D00.Distribution.png",height=4, width=5, units=c("in"))
BackD24Small <- BackD24[,c(5,4,1,2,9,10,13,14)]
BackD24Small[,3] <- "NA"
BackD24Small[,4] <- "NA"
BackD24Small$group <- "All"
colnames(BackD24Small) <- colnames(D24_v_D00Small)
BackD24Small_noDE <- BackD24Small[!(BackD24Small$V5 %in% DBackD24Small$V5),]
D24_v_D00Small_wBackground <- rbind(D24_v_D00Small,BackD24Small_noDE)
colnames(D24_v_D00Small_wBackground) <- c("Gene","Ensembl_ID","gene_log2FC","gene_padj","peak","peak_log2FC","peak_padj","distance","group")
ggplot(D24_v_D00Small_wBackground, aes(x=distance, fill=group, color = group)) +  geom_density(alpha=.1, adjust=2) + xlim(-2e5,2e5)
ggsave("D24_vs_D00.Distribution.png",height=4, width=5, units=c("in"))
BackD24Small_noDE <- BackD24Small[!(BackD24Small$V5 %in% D24_DE_sum),]
D24_v_D00Small_wBackground <- rbind(D24_v_D00Small,BackD24Small_noDE)
colnames(D24_v_D00Small_wBackground) <- c("Gene","Ensembl_ID","gene_log2FC","gene_padj","peak","peak_log2FC","peak_padj","distance","group")
ggplot(D24_v_D00Small_wBackground, aes(x=distance, fill=group, color = group)) +  geom_density(alpha=.1, adjust=2) + xlim(-2e5,2e5)
ggsave("D24_vs_D00.lessDE.Distribution.png",height=4, width=5, units=c("in"))
library(ComplexHeatmap)
library(circlize)
library(plyr)
library(DESeq2)
library(edgeR)
library(genefilter)
library("devtools")
library("BiocParallel")
library(pathview)
#register(MulticoreParam(4))
library(R.utils)
library(gplots)
library(ggplot2)
library(limma)
library("calibrate")
library(gage)
library(gageData)
colnames(BulkSmall) <- colnames(CiliatedSmall)
colnames(BackgroundSmall) <- colnames(ProliferatingSmall)
BackgroundSmall <- BackgroundSmall[!(BackgroundSmall$V5 %in% BulkSmall$V4),]
all <- rbind(ProliferatingSmall,BasalSmall,IntermediateSmall,SecretorySmall,CiliatedSmall,BackgroundSmall)
colnames(all) <- c("Gene","Ensembl_ID","gene_log2FC","gene_padj","peak","peak_log2FC","peak_padj","distance","group")
colnames(BulkSmall) <- c("Gene","Ensembl_ID","gene_log2FC","gene_padj","peak","peak_log2FC","peak_padj","distance","group")
colnames(BackgroundSmall) <- c("Gene","Ensembl_ID","gene_log2FC","gene_padj","peak","peak_log2FC","peak_padj","distance","group")
bulkAndBackground <- bulkAndBackground[!(bulkAndBackground$Gene %in% BulkSmall$Gene),]
bulkAndBackground <- rbind(BulkSmall,BackgroundSmall)
all$bigGroup <- "DE"
all$bigGroup[all$group == "All"] <- "All"
all$group <- gsub("All","Background",all$group)
all$group <- as.factor(all$group)
SecretoryForPlot <- all[all$group %in% c("Background","Secretory"),]
load("data.R")
bulkAndBackground
colnames(BulkSmall) <- colnames(CiliatedSmall)
colnames(BackgroundSmall) <- colnames(ProliferatingSmall)
BackgroundSmall <- BackgroundSmall[!(BackgroundSmall$V5 %in% BulkSmall$V4),]
all <- rbind(ProliferatingSmall,BasalSmall,IntermediateSmall,SecretorySmall,CiliatedSmall,BackgroundSmall)
colnames(all) <- c("Gene","Ensembl_ID","gene_log2FC","gene_padj","peak","peak_log2FC","peak_padj","distance","group")
colnames(BulkSmall) <- c("Gene","Ensembl_ID","gene_log2FC","gene_padj","peak","peak_log2FC","peak_padj","distance","group")
colnames(BackgroundSmall) <- c("Gene","Ensembl_ID","gene_log2FC","gene_padj","peak","peak_log2FC","peak_padj","distance","group")
bulkAndBackground <- bulkAndBackground[!(bulkAndBackground$Gene %in% BulkSmall$Gene),]
bulkAndBackground <- rbind(BulkSmall,BackgroundSmall)
all$bigGroup <- "DE"
all$bigGroup[all$group == "All"] <- "All"
all$group <- gsub("All","Background",all$group)
all$group <- as.factor(all$group)
SecretoryForPlot <- all[all$group %in% c("Background","Secretory"),]
ggplot(SecretoryForPlot, aes(x=distance, fill=group)) + geom_density(alpha=.1) + xlim(-2e5,2e5) +
geom_vline(xintercept=c(-1e5,0,1e5), linetype="dotted") +  theme(legend.position="right") + scale_fill_discrete(name="")
BasalForPlot <- all[all$group %in% c("Background","Basal"),]
ggplot(BasalForPlot, aes(x=distance, fill=group)) + geom_density(alpha=.1) + xlim(-2e5,2e5) +
geom_vline(xintercept=c(-1e5,0,1e5), linetype="dotted") +  theme(legend.position="right") + scale_fill_discrete(name="")
SecretoryForPlot <- all[all$group %in% c("Background","Secretory"),]
ggplot(SecretoryForPlot, aes(x=distance, fill=group)) + geom_density(alpha=.1) + xlim(-2e5,2e5) + ylim(0,2e-5) +
geom_vline(xintercept=c(-1e5,0,1e5), linetype="dotted") +  theme(legend.position="right") + scale_fill_discrete(name="")
ggsave("Secretory.Distribution.axisFix.png",height=4, width=5, units=c("in"))
BasalForPlot <- all[all$group %in% c("Background","Basal"),]
ggplot(BasalForPlot, aes(x=distance, fill=group)) + geom_density(alpha=.1) + xlim(-2e5,2e5) + ylim(0,2e-5) +
geom_vline(xintercept=c(-1e5,0,1e5), linetype="dotted") +  theme(legend.position="right") + scale_fill_discrete(name="")
ggsave("Basal.Distribution.axisFix.png",height=4, width=5, units=c("in"))
CiliatedForPlot <- all[all$group %in% c("Background","Ciliated"),]
ggplot(CiliatedForPlot, aes(x=distance, fill=group)) + geom_density(alpha=.1) + xlim(-2e5,2e5) + ylim(0,2e-5) +
geom_vline(xintercept=c(-1e5,0,1e5), linetype="dotted") +  theme(legend.position="right") + scale_fill_discrete(name="")
ggsave("Ciliated.Distribution.axisFix.png",height=4, width=5, units=c("in"))
IntermediateForPlot <- all[all$group %in% c("Background","Intermediate"),]
ggplot(IntermediateForPlot, aes(x=distance, fill=group)) + geom_density(alpha=.1) + xlim(-2e5,2e5) + ylim(0,2e-5) +
geom_vline(xintercept=c(-1e5,0,1e5), linetype="dotted") +  theme(legend.position="right") + scale_fill_discrete(name="")
ggsave("Intermediate.Distribution.axisFix.png",height=4, width=5, units=c("in"))
ProliferatingForPlot <- all[all$group %in% c("Background","Proliferating"),]
ggplot(ProliferatingForPlot, aes(x=distance, fill=group)) + geom_density(alpha=.1) + xlim(-2e5,2e5) + ylim(0,2e-5) +
geom_vline(xintercept=c(-1e5,0,1e5), linetype="dotted") +  theme(legend.position="right") + scale_fill_discrete(name="")
ggsave("Proliferating.Distribution.axisFix.png",height=4, width=5, units=c("in"))
bulkAndBackground$group <- gsub("All","Background",bulkAndBackground$group)
bulkAndBackground$$group <- as.factor(bulkAndBackground$group)
ggplot(bulkAndBackground, aes(x=distance, fill=group)) + geom_density(alpha=.1) + xlim(-1e6,1e6) + ylim(0,2e-5) +
geom_vline(xintercept=c(-1e5,0,1e5), linetype="dotted") +  theme(legend.position="right") + scale_fill_discrete(name="")
ggsave("BulkRNA.Distribution.axisFix.png",height=4, width=5, units=c("in"))
SecretoryForPlot <- all[all$group %in% c("Background","Secretory"),]
ggplot(SecretoryForPlot, aes(x=distance, fill=group)) + geom_density(alpha=.1) + xlim(-2e5,2e5) + ylim(0,1.5e-5) +
geom_vline(xintercept=c(-1e5,0,1e5), linetype="dotted") +  theme(legend.position="right") + scale_fill_discrete(name="")
ggsave("Secretory.Distribution.axisFix.png",height=4, width=5, units=c("in"))
BasalForPlot <- all[all$group %in% c("Background","Basal"),]
ggplot(BasalForPlot, aes(x=distance, fill=group)) + geom_density(alpha=.1) + xlim(-2e5,2e5) + ylim(0,1.5e-5) +
geom_vline(xintercept=c(-1e5,0,1e5), linetype="dotted") +  theme(legend.position="right") + scale_fill_discrete(name="")
ggsave("Basal.Distribution.axisFix.png",height=4, width=5, units=c("in"))
CiliatedForPlot <- all[all$group %in% c("Background","Ciliated"),]
ggplot(CiliatedForPlot, aes(x=distance, fill=group)) + geom_density(alpha=.1) + xlim(-2e5,2e5) + ylim(0,1.5e-5) +
geom_vline(xintercept=c(-1e5,0,1e5), linetype="dotted") +  theme(legend.position="right") + scale_fill_discrete(name="")
ggsave("Ciliated.Distribution.axisFix.png",height=4, width=5, units=c("in"))
IntermediateForPlot <- all[all$group %in% c("Background","Intermediate"),]
ggplot(IntermediateForPlot, aes(x=distance, fill=group)) + geom_density(alpha=.1) + xlim(-2e5,2e5) + ylim(0,1.5e-5) +
geom_vline(xintercept=c(-1e5,0,1e5), linetype="dotted") +  theme(legend.position="right") + scale_fill_discrete(name="")
ggsave("Intermediate.Distribution.axisFix.png",height=4, width=5, units=c("in"))
ProliferatingForPlot <- all[all$group %in% c("Background","Proliferating"),]
ggplot(ProliferatingForPlot, aes(x=distance, fill=group)) + geom_density(alpha=.1) + xlim(-2e5,2e5) + ylim(0,1.5e-5) +
geom_vline(xintercept=c(-1e5,0,1e5), linetype="dotted") +  theme(legend.position="right") + scale_fill_discrete(name="")
ggsave("Proliferating.Distribution.axisFix.png",height=4, width=5, units=c("in"))
bulkAndBackground$group <- gsub("All","Background",bulkAndBackground$group)
bulkAndBackground$$group <- as.factor(bulkAndBackground$group)
ggplot(bulkAndBackground, aes(x=distance, fill=group)) + geom_density(alpha=.1) + xlim(-1e6,1e6) + ylim(0,1.5e-5) +
geom_vline(xintercept=c(-1e5,0,1e5), linetype="dotted") +  theme(legend.position="right") + scale_fill_discrete(name="")
ggsave("BulkRNA.Distribution.axisFix.png",height=4, width=5, units=c("in"))
SecretoryForPlot <- all[all$group %in% c("Background","Secretory"),]
ggplot(SecretoryForPlot, aes(x=distance, fill=group)) + geom_density(alpha=.1) + xlim(-2e5,2e5) + ylim(0,1.5e-5) +
geom_vline(xintercept=c(-1e5,0,1e5), linetype="dotted") +  theme(legend.position="right") + scale_fill_discrete(name="")
ggsave("Secretory.Distribution.axisFix.png",height=4, width=6, units=c("in"))
BasalForPlot <- all[all$group %in% c("Background","Basal"),]
ggplot(BasalForPlot, aes(x=distance, fill=group)) + geom_density(alpha=.1) + xlim(-2e5,2e5) + ylim(0,1.5e-5) +
geom_vline(xintercept=c(-1e5,0,1e5), linetype="dotted") +  theme(legend.position="right") + scale_fill_discrete(name="")
ggsave("Basal.Distribution.axisFix.png",height=4, width=6, units=c("in"))
CiliatedForPlot <- all[all$group %in% c("Background","Ciliated"),]
ggplot(CiliatedForPlot, aes(x=distance, fill=group)) + geom_density(alpha=.1) + xlim(-2e5,2e5) + ylim(0,1.5e-5) +
geom_vline(xintercept=c(-1e5,0,1e5), linetype="dotted") +  theme(legend.position="right") + scale_fill_discrete(name="")
ggsave("Ciliated.Distribution.axisFix.png",height=4, width=6, units=c("in"))
IntermediateForPlot <- all[all$group %in% c("Background","Intermediate"),]
ggplot(IntermediateForPlot, aes(x=distance, fill=group)) + geom_density(alpha=.1) + xlim(-2e5,2e5) + ylim(0,1.5e-5) +
geom_vline(xintercept=c(-1e5,0,1e5), linetype="dotted") +  theme(legend.position="right") + scale_fill_discrete(name="")
ggsave("Intermediate.Distribution.axisFix.png",height=4, width=6, units=c("in"))
ProliferatingForPlot <- all[all$group %in% c("Background","Proliferating"),]
ggplot(ProliferatingForPlot, aes(x=distance, fill=group)) + geom_density(alpha=.1) + xlim(-2e5,2e5) + ylim(0,1.5e-5) +
geom_vline(xintercept=c(-1e5,0,1e5), linetype="dotted") +  theme(legend.position="right") + scale_fill_discrete(name="")
ggsave("Proliferating.Distribution.axisFix.png",height=4, width=6, units=c("in"))
bulkAndBackground$group <- gsub("All","Background",bulkAndBackground$group)
bulkAndBackground$$group <- as.factor(bulkAndBackground$group)
ggplot(bulkAndBackground, aes(x=distance, fill=group)) + geom_density(alpha=.1) + xlim(-1e6,1e6) + ylim(0,1.5e-5) +
geom_vline(xintercept=c(-1e5,0,1e5), linetype="dotted") +  theme(legend.position="right") + scale_fill_discrete(name="")
ggsave("BulkRNA.Distribution.axisFix.png",height=4, width=6, units=c("in"))
library(Seurat)
?Seurat
??Seurat
?SubsetData
library(ggrepel)
library("cowplot")
library("stringr")
library(biomaRt)
library(dplyr)
library(DESeq2)
library(genefilter)
library("devtools")
library("BiocParallel")
library(Rtsne)
#register(MulticoreParam(4))
library(R.utils)
sourceDirectory("~/data/BatchArray-source/src")
source("~/data/BatchArray-source/load.R")
source("~/tools/R.RNA-seq/DAVID.R")
source("~/tools/R.RNA-seq/Pathway.analysis.R")
library(gplots)
library(ggplot2)
library(limma)
library(jsonlite)
# api-endpoint
URL = "https://timur.ucsf.edu/ipi/consignment"
# api-endpoint
URL = "https://timur.ucsf.edu/ipi/consignment"
# location given here
query = c("@mfi = table(\n  [ 'mfi', \n    [ 'population', 'sample', 'sample_name', '::in', [ 'IPICRC058.T1', 'IPICRC058.N1'  ] ]\n  ], \n  [\n    sample_name: [ 'population', 'sample', 'sample_name'],\n    population_name: [ 'population', 'name'],\n    population_ancestry: [ 'population', 'ancestry'],\n    stain: [ 'population', 'stain'],\n    name: ['name'],\n    value: ['value'],\n    fluor: ['fluor']\n  ] \n)")
# defining a params dict for the parameters to be sent to the API
POST_DATA = c("query")
names(POST_DATA) = "queries"
#POST_DATA = {"queries"  : ["@nested_vector = [ l1: [ a: 1, b: 2 ], l2: [ c: 3, d: 5, d: 6 ] ]"]}
TOKEN = "eyJhbGciOiJSUzI1NiJ9.eyJlbWFpbCI6IndhbHRlci5lY2thbGJhckB1Y3NmLmVkdSIsImZpcnN0IjoiV2FsdGVyIiwibGFzdCI6IkVja2FsYmFyIiwicGVybSI6InY6aXBpIiwiZXhwIjoxNTU0ODYyNDI2fQ.PJ4fX63vJefKwIfo_3ziQOkQN3Z6I-3ithSS6wtPKaE3glq15uAbIfQ40ngTjRGmNvg-oUdPjQPZorLXNqnAtcBgo5oALkZ-4BrLi512zQcP72Rle2hBSlc5AW1S_c7FGQ5yZANJL8jzBFEPJ6w_RAMVa3tHOC1JaJahh_JBIIAvtfuUG5hUf7ofWhhTaxqne8icX7XqDdM6kMKrT8mIOfAHvv6jAupEpFZRXPp4F4rFqQ43N7LDIxHGWqUx6GLEPCZ9mECNYDGfwTQwcE4rDp92wW2274HB_8N2EDCJfjsl3pjIfFmwhSYuxKXFO7qGROClXL_0OUVEQD3vdr6bdHWKLWB6ulY6IE-AiDYSCwKiLW7HYHf5MaTrKYKnFJOmvSxIjiLq3PlkNmq-LV1T57CE6-6OLSvUvjXs6JhIlr93FCxpUtcD2OuQSh7cIoxdFqy97eeO5kH1o8lHOJvrOzXNX0MOuwZopoPW5SgBwg8G0Gy00sQGn9jnVYP3G3g_H2_RtvhZ_m8MFvmw8qxxSExc4jVI8RShxLM1ADArq7WL4Py6m25kXFqiFxn0PMvPxZfc7OcpYf7_JKc2r1aDqZBR7561lojIelXAOZfYrt4j4pA3bX2Ho9JSeCPZVozrNgWR6J2r9B9Lmcz4JXZ38aCsUZpDh5-zBZRIvwp5PMY"
COOKIE =  "JANUS_TOKEN=%s"%TOKEN
HEADERS = c("timur.ucsf.edu",
"*/*",
"en-US,en;q=0.5",
"gzip, deflate, br",
"application/json",
"keep-alive",
COOKIE)
names(HEADERS) = c("Host",
"Accept",
"Accept-Language",
"Accept-Encoding",
"content-type",
"Connection",
"Cookie")
COOKIE =  c("JANUS_TOKEN=",TOKEN,sep="")
COOKIE
COOKIE =  paste("JANUS_TOKEN=",TOKEN,sep="")
COOKIE
HEADERS = c("timur.ucsf.edu",
"*/*",
"en-US,en;q=0.5",
"gzip, deflate, br",
"application/json",
"keep-alive",
COOKIE)
names(HEADERS) = c("Host",
"Accept",
"Accept-Language",
"Accept-Encoding",
"content-type",
"Connection",
"Cookie")
HEADERS
library(httr)
?GET
url <- "http://httpbin.org/get"
url
GET(url)
GET(url)
d = GET(url)
d
GET(url, add_headers(a = 1, b = 2))
library(rlist)
install.packages("rlist")
library(rlist)
list(page="2")
POST_DATA
HEADERS = list(Host="timur.ucsf.edu",
Accept= "*/*",
Accept-Language= "en-US,en;q=0.5",
Accept-Encoding= "gzip, deflate, br",
content-type= "application/json",
Connection= "keep-alive",
Cookie= COOKIE}
HEADERS = list(Host="timur.ucsf.edu",
Accept= "*/*",
Accept-Language= "en-US,en;q=0.5",
Accept-Encoding= "gzip, deflate, br",
content-type= "application/json",
Connection= "keep-alive",
Cookie= COOKIE)
HEADERS = list(Host="timur.ucsf.edu",
Accept="*/*")
HEADERS
COOKIE
HEADERS = list(Host="timur.ucsf.edu",
Accept="*/*",
Accept-Language="en-US,en;q=0.5",
Accept-Encoding= "gzip, deflate, br",
content-type= "application/json",
Connection= "keep-alive",
Cookie= eval(COOKIE))
HEADERS = list(Host="timur.ucsf.edu",
Accept="*/*")
HEADERS = list(Host="timur.ucsf.edu",
Accept="*/*",
Accept-Language="en-US,en;q=0.5")
HEADERS = list(Host="timur.ucsf.edu",
Accept="*/*",
"Accept-Language"="en-US,en;q=0.5",
"Accept-Encoding"= "gzip, deflate, br",
"content-type"= "application/json",
Connection= "keep-alive",
Cookie= COOKIE)
HEADERS
names(HEADERS)
resp<-GET(URL,query=query)
# api-endpoint
URL = "https://timur.ucsf.edu/ipi/consignment"
URL
resp<-GET(URL,query=query)
query<-list(page="2")
resp<-GET("https://reqres.in/api/users",query=query)
resp
resp<-GET("https://timur.ucsf.edu/ipi/consignment",query=query)
URL
resp<-GET(URL[1],query=query)
resp<-GET("https://timur.ucsf.edu/ipi/consignment",query=query)
resp<-GET("https://timur.ucsf.edu/ipi/consignment",query=query)
resp<-GET("https://timur.ucsf.edu/ipi/consignment",query=query)
resp<-GET(URL[1],query=query)
resp<-GET(URL[1],query=query)
resp<-GET(URL[1],query=query)
http_type(resp)
resp<-GET(URL[1])
resp<-GET(URL[1])
resp<-GET(URL[1])
http_type(resp)
content(resp,as="parsed")
install.packages("lubridate")
library("lubridate")
options(stringsAsFactors = FALSE)
GET(URL[1])
reps
resp
resp$content
this.raw.content <- rawToChar(resp$content)
this.raw.content
substr(this.raw.content, 1, 100)
this.content <- fromJSON(this.raw.content)
content(resp,as="parsed")
resp<-GET(URL[1],query=query)
resp<-GET(URL[1],query=query)
resp<-GET(URL[1])
resp<-GET(URL[1],query=query)
content(resp,as="parsed")
http_type(resp)
headers(resp)
URL = "https://timur.ucsf.edu/ipi/consignment"
# location given here
query = c("@mfi = table(\n  [ 'mfi', \n    [ 'population', 'sample', 'sample_name', '::in', [ 'IPICRC058.T1', 'IPICRC058.N1'  ] ]\n  ], \n  [\n    sample_name: [ 'population', 'sample', 'sample_name'],\n    population_name: [ 'population', 'name'],\n    population_ancestry: [ 'population', 'ancestry'],\n    stain: [ 'population', 'stain'],\n    name: ['name'],\n    value: ['value'],\n    fluor: ['fluor']\n  ] \n)")
# defining a params dict for the parameters to be sent to the API
POST_DATA=list(queries="query")
#POST_DATA = c("query")
#names(POST_DATA) = "queries"
#POST_DATA = {"queries"  : ["@nested_vector = [ l1: [ a: 1, b: 2 ], l2: [ c: 3, d: 5, d: 6 ] ]"]}
TOKEN = "eyJhbGciOiJSUzI1NiJ9.eyJlbWFpbCI6IndhbHRlci5lY2thbGJhckB1Y3NmLmVkdSIsImZpcnN0IjoiV2FsdGVyIiwibGFzdCI6IkVja2FsYmFyIiwicGVybSI6InY6aXBpIiwiZXhwIjoxNTU0ODYyNDI2fQ.PJ4fX63vJefKwIfo_3ziQOkQN3Z6I-3ithSS6wtPKaE3glq15uAbIfQ40ngTjRGmNvg-oUdPjQPZorLXNqnAtcBgo5oALkZ-4BrLi512zQcP72Rle2hBSlc5AW1S_c7FGQ5yZANJL8jzBFEPJ6w_RAMVa3tHOC1JaJahh_JBIIAvtfuUG5hUf7ofWhhTaxqne8icX7XqDdM6kMKrT8mIOfAHvv6jAupEpFZRXPp4F4rFqQ43N7LDIxHGWqUx6GLEPCZ9mECNYDGfwTQwcE4rDp92wW2274HB_8N2EDCJfjsl3pjIfFmwhSYuxKXFO7qGROClXL_0OUVEQD3vdr6bdHWKLWB6ulY6IE-AiDYSCwKiLW7HYHf5MaTrKYKnFJOmvSxIjiLq3PlkNmq-LV1T57CE6-6OLSvUvjXs6JhIlr93FCxpUtcD2OuQSh7cIoxdFqy97eeO5kH1o8lHOJvrOzXNX0MOuwZopoPW5SgBwg8G0Gy00sQGn9jnVYP3G3g_H2_RtvhZ_m8MFvmw8qxxSExc4jVI8RShxLM1ADArq7WL4Py6m25kXFqiFxn0PMvPxZfc7OcpYf7_JKc2r1aDqZBR7561lojIelXAOZfYrt4j4pA3bX2Ho9JSeCPZVozrNgWR6J2r9B9Lmcz4JXZ38aCsUZpDh5-zBZRIvwp5PMY"
COOKIE =  paste("JANUS_TOKEN=",TOKEN,sep="")
HEADERS = list(Host="timur.ucsf.edu",
Accept="*/*",
"Accept-Language"="en-US,en;q=0.5",
"Accept-Encoding"= "gzip, deflate, br",
"content-type"= "application/json",
Connection= "keep-alive",
Cookie= COOKIE)
# sending get request and saving the response as response object
#r = requests.post(url = URL, data = json.dumps(POST_DATA), headers = HEADERS).json()
#r = GET(url, add_headers(HEADERS))
resp<-GET(URL[1],query=query)
URL = "https://timur.ucsf.edu/ipi/consignment"
# location given here
query = c("@mfi = table(\n  [ 'mfi', \n    [ 'population', 'sample', 'sample_name', '::in', [ 'IPICRC058.T1', 'IPICRC058.N1'  ] ]\n  ], \n  [\n    sample_name: [ 'population', 'sample', 'sample_name'],\n    population_name: [ 'population', 'name'],\n    population_ancestry: [ 'population', 'ancestry'],\n    stain: [ 'population', 'stain'],\n    name: ['name'],\n    value: ['value'],\n    fluor: ['fluor']\n  ] \n)")
# defining a params dict for the parameters to be sent to the API
POST_DATA=list(queries="query")
#POST_DATA = c("query")
#names(POST_DATA) = "queries"
#POST_DATA = {"queries"  : ["@nested_vector = [ l1: [ a: 1, b: 2 ], l2: [ c: 3, d: 5, d: 6 ] ]"]}
TOKEN = "eyJhbGciOiJSUzI1NiJ9.eyJlbWFpbCI6IndhbHRlci5lY2thbGJhckB1Y3NmLmVkdSIsImZpcnN0IjoiV2FsdGVyIiwibGFzdCI6IkVja2FsYmFyIiwicGVybSI6InY6aXBpIiwiZXhwIjoxNTU0ODYyNDI2fQ.PJ4fX63vJefKwIfo_3ziQOkQN3Z6I-3ithSS6wtPKaE3glq15uAbIfQ40ngTjRGmNvg-oUdPjQPZorLXNqnAtcBgo5oALkZ-4BrLi512zQcP72Rle2hBSlc5AW1S_c7FGQ5yZANJL8jzBFEPJ6w_RAMVa3tHOC1JaJahh_JBIIAvtfuUG5hUf7ofWhhTaxqne8icX7XqDdM6kMKrT8mIOfAHvv6jAupEpFZRXPp4F4rFqQ43N7LDIxHGWqUx6GLEPCZ9mECNYDGfwTQwcE4rDp92wW2274HB_8N2EDCJfjsl3pjIfFmwhSYuxKXFO7qGROClXL_0OUVEQD3vdr6bdHWKLWB6ulY6IE-AiDYSCwKiLW7HYHf5MaTrKYKnFJOmvSxIjiLq3PlkNmq-LV1T57CE6-6OLSvUvjXs6JhIlr93FCxpUtcD2OuQSh7cIoxdFqy97eeO5kH1o8lHOJvrOzXNX0MOuwZopoPW5SgBwg8G0Gy00sQGn9jnVYP3G3g_H2_RtvhZ_m8MFvmw8qxxSExc4jVI8RShxLM1ADArq7WL4Py6m25kXFqiFxn0PMvPxZfc7OcpYf7_JKc2r1aDqZBR7561lojIelXAOZfYrt4j4pA3bX2Ho9JSeCPZVozrNgWR6J2r9B9Lmcz4JXZ38aCsUZpDh5-zBZRIvwp5PMY"
COOKIE =  paste("JANUS_TOKEN=",TOKEN,sep="")
HEADERS = list(Host="timur.ucsf.edu",
Accept="*/*",
"Accept-Language"="en-US,en;q=0.5",
"Accept-Encoding"= "gzip, deflate, br",
"content-type"= "application/json",
Connection= "keep-alive",
Cookie= COOKIE)
# sending get request and saving the response as response object
#r = requests.post(url = URL, data = json.dumps(POST_DATA), headers = HEADERS).json()
#r = GET(url, add_headers(HEADERS))
resp<-GET(URL,query=query)
options(stringsAsFactors = TRUE)
resp<-GET(URL[1],query=query)
URL
URL[1]
URL
resp<-GET(URL[1],query=query)
options(stringsAsFactors = FALSE)
resp<-GET(URL[1],query=query)
resp<-GET(URL,query=query)
resp<-GET(URL)
resp<-GET(URL,query=query)
resp<-GET(URL)
headers(resp)
# api-endpoint
URL = "https://timur.ucsf.edu/api/consignment/ipi"
# location given here
query = c("@mfi = table(\n  [ 'mfi', \n    [ 'population', 'sample', 'sample_name', '::in', [ 'IPICRC058.T1', 'IPICRC058.N1'  ] ]\n  ], \n  [\n    sample_name: [ 'population', 'sample', 'sample_name'],\n    population_name: [ 'population', 'name'],\n    population_ancestry: [ 'population', 'ancestry'],\n    stain: [ 'population', 'stain'],\n    name: ['name'],\n    value: ['value'],\n    fluor: ['fluor']\n  ] \n)")
# defining a params dict for the parameters to be sent to the API
POST_DATA=list(queries="query")
TOKEN = "eyJhbGciOiJSUzI1NiJ9.eyJlbWFpbCI6IndhbHRlci5lY2thbGJhckB1Y3NmLmVkdSIsImZpcnN0IjoiV2FsdGVyIiwibGFzdCI6IkVja2FsYmFyIiwicGVybSI6InY6aXBpIiwiZXhwIjoxNTU0OTMyOTU4fQ.kxx5B2hfz5LCjM_P9sPnhBAkhxiZ1Pnzqq-OPxgHDLon44FVQxCDaBe5qaiMlOD6w1p2hdefHajJB9m_rBOJ81D9VwQIug-WctIYval1O0HXY58WIWWnCDVz95IXx28HUNCx6vEc6-EOs7fmTiKc22zm92AhkO-d82V-Au0deQ11xZfd6s-_GU6FH0douwGAYA-ycj1T_GNRbQixGMaTjihgGY-PEvXeNH3wGF0Evcqeusa0hVtSAmLX3UQwJwBe2IrVUmDgBcWoUU_nNbgliJR2AlNyDejwC6i-1hlRmm0yGlKG0KcrgOfsMVkelvWB2g3NdNWxcDD4Zfa8VuybMqCCptSNrWG4sgs5Mq5ppwlv_srzeCNM6AtCKg2fw_BkfSCFUFtdgqN7-3XC7w_AjDnibPN5dsYRyULO84KFFpOv4SzILZdS-haVkh-ImKfgITyBKo-s-8UH4KQox-k_9flRrLDdkVeD0QyF5SlcqpZT7pomaZktXOA3Pw7a7AoEb3fGTr__0kZUJH96EPN1Hwi6QcwkugTiLlFrqXRsFI0Q-GdbczXH5FNpTxLckJHvR5ItnStttMrv1Gu1lWbnDYYyoSvrFeiSR-jy8u4iN67CYqmSqP-C8eg_YgjygaNak9PQOMvNkUdy8pQw-LKET5_xWjcMqTzYwPIidNjFmD8"
COOKIE =  paste("JANUS_TOKEN=",TOKEN,sep="")
HEADERS = list(Host="timur.ucsf.edu",
Accept="*/*",
"Accept-Language"="en-US,en;q=0.5",
"Accept-Encoding"= "gzip, deflate, br",
"content-type"= "application/json",
Connection= "keep-alive",
Cookie= COOKIE)
resp<-POST(URL, add_headers(Host="timur.ucsf.edu",
Accept="*/*",
"Accept-Language"="en-US,en;q=0.5",
"Accept-Encoding"= "gzip, deflate, br",
"content-type"= "application/json",
Connection= "keep-alive",
Cookie= COOKIE))
resp
project <- c("Data_Library")
dir <- paste(paste("~/data",project, sep = "/"),"Timur", sep = "/")
dir.create(dir)
setwd(dir)
dir.create(dir,recursive = T)
setwd(dir)
